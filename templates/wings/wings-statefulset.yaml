{{- if .Values.wings.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pterodactyl.wings.name" . }}
  namespace: {{ .Values.namespace | default "pterodactyl" }}
  labels:
    {{- include "pterodactyl.labels" . | nindent 4 }}
    app.kubernetes.io/component: wings
spec:
  serviceName: {{ include "pterodactyl.wings.name" . }}-headless
  replicas: {{ len .Values.wings.servers }}
  selector:
    matchLabels:
      {{- include "pterodactyl.wings.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "pterodactyl.wings.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: 0
      {{- if .Values.wings.autoConfig.enabled }}
      initContainers:
        - name: wings-auto-config
          image: "{{ .Values.panel.image.repository }}:{{ .Values.panel.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.panel.image.pullPolicy }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          env:
            - name: APP_URL
              value: "https://{{ .Values.global.panelUrl }}"
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "pterodactyl.panel.name" . }}-app
                  key: app-key
            - name: APP_ENV
              value: {{ .Values.panel.env.APP_ENV }}
            - name: APP_DEBUG
              value: "{{ .Values.panel.env.APP_DEBUG }}"
            - name: APP_TIMEZONE
              value: {{ .Values.panel.env.APP_TIMEZONE }}
            - name: CACHE_DRIVER
              value: {{ .Values.panel.env.CACHE_DRIVER }}
            - name: SESSION_DRIVER
              value: {{ .Values.panel.env.SESSION_DRIVER }}
            - name: QUEUE_CONNECTION
              value: {{ .Values.panel.env.QUEUE_CONNECTION }}
            - name: DB_HOST
              value: {{ .Values.panel.database.host }}
            - name: DB_PORT
              value: "{{ .Values.panel.database.port }}"
            - name: DB_DATABASE
              value: {{ .Values.panel.database.database }}
            - name: DB_USERNAME
              value: {{ .Values.panel.database.username }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pterodactyl.panel.name" . }}-db
                  key: db-password
            - name: REDIS_HOST
              value: {{ .Values.panel.redis.host }}
            - name: REDIS_PORT
              value: "{{ .Values.panel.redis.port }}"
            - name: NODE_NAME
              value: "{{ include "pterodactyl.wings.name" . }}"
            - name: WINGS_FQDN
              value: ""  # Will be set dynamically in the init script
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME_K8S
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Waiting for Panel to be ready..."
              while ! curl -s http://{{ include "pterodactyl.panel.name" . }}.{{ .Values.namespace | default "pterodactyl" }}.svc.cluster.local/api/system >/dev/null 2>&1; do
                echo "Panel not ready, waiting 10 seconds..."
                sleep 10
              done
              echo "Panel is ready!"
              
              # Extract instance index from pod name (e.g. pterodactyl-wings-0 -> 0)
              INSTANCE_INDEX=$(echo "$POD_NAME" | sed 's/.*-//')
              echo "Wings instance index: $INSTANCE_INDEX"
              
              # Set unique FQDN for this Wings instance
              WINGS_FQDN="wings-${INSTANCE_INDEX}.{{ .Values.global.wingsDomain | default .Values.global.panelUrl }}"
              echo "Wings FQDN: $WINGS_FQDN"
              
              # Generate cool 3-word random names with instance suffix
              ADJECTIVES="happy brave calm swift bold clever quiet wild bright gentle fierce proud noble wise strong agile nimble steady mighty powerful graceful elegant sleek smooth polished refined crisp sharp focused alert keen vigilant watchful silent stealthy swift rapid quick lightning blazing burning glowing radiant luminous brilliant dazzling sparkling shimmering gleaming majestic royal regal imperial cosmic stellar lunar solar arctic alpine mountain ocean desert storm thunder lightning frost crystal diamond emerald sapphire"
              NOUNS="dolphin tiger whale shark eagle hawk wolf bear lion fox deer rabbit owl snake dragon falcon raven crow phoenix griffin unicorn pegasus leopard panther jaguar cheetah lynx cougar puma bobcat serval caracal ocelot margay kodiak grizzly polar panda koala wombat kangaroo wallaby platypus echidna badger wolverine otter seal walrus narwhal orca beluga manatee dugong turtle tortoise gecko iguana chameleon salamander newt frog toad spider scorpion mantis beetle butterfly dragonfly firefly hummingbird kingfisher woodpecker cardinal bluejay mockingbird nightingale"
              COLORS="red blue green yellow purple orange pink silver gold bronze copper iron steel jade ruby emerald sapphire topaz amethyst garnet onyx obsidian quartz crystal diamond pearl platinum titanium cobalt chrome nickel zinc aluminum magnesium lithium neon cyan magenta turquoise teal mint lime coral salmon rose crimson scarlet burgundy maroon navy royal azure cerulean indigo violet lavender plum orchid fuchsia amber honey caramel chocolate coffee espresso mocha vanilla cream ivory pearl snow frost ice glacier arctic"
              
              # Pick random words
              ADJ=$(echo $ADJECTIVES | tr ' ' '\n' | shuf -n 1)
              NOUN=$(echo $NOUNS | tr ' ' '\n' | shuf -n 1)
              COLOR=$(echo $COLORS | tr ' ' '\n' | shuf -n 1)
              
              # Generate location and node names with instance index
              LOCATION_SHORT="${ADJ}-${NOUN}-${COLOR}-${INSTANCE_INDEX}"
              LOCATION_LONG="{{ .Values.wings.autoConfig.location.long }} (${LOCATION_SHORT}) on node ${NODE_NAME_K8S}"
              
              NODE_NAME_RANDOM="${LOCATION_SHORT}"
              
              echo "Creating unique location: ${LOCATION_SHORT}"
              echo "Location description: ${LOCATION_LONG}"
              echo "Creating unique node: ${NODE_NAME_RANDOM}"
              
              # Create fresh location and capture the ID
              echo "Creating fresh location: ${LOCATION_SHORT}"
              LOCATION_OUTPUT=$(php artisan p:location:make --short="${LOCATION_SHORT}" --long="${LOCATION_LONG}" 2>&1)
              echo "Location creation output: ${LOCATION_OUTPUT}"
              
              # Extract location ID from creation output
              LOCATION_ID=$(echo "${LOCATION_OUTPUT}" | grep -o 'ID of [0-9]*' | cut -d' ' -f3)
              echo "Created location with ID: ${LOCATION_ID}"
              
              # Create node and capture the ID
              echo "Creating node: ${NODE_NAME_RANDOM}"
              NODE_OUTPUT=$(php artisan p:node:make \
                --name="${NODE_NAME_RANDOM}" \
                --description="Auto-generated Wings node for ${LOCATION_SHORT} on ${NODE_NAME_K8S}" \
                --locationId="${LOCATION_ID}" \
                --fqdn="${WINGS_FQDN}" \
                --public=1 \
                --scheme=https \
                --proxy=1 \
                --maintenance=0 \
                --daemonListeningPort=443 \
                --daemonSFTPPort=2022 \
                --maxMemory={{ .Values.wings.autoConfig.node.memory }} \
                --overallocateMemory={{ .Values.wings.autoConfig.node.memoryOverallocate }} \
                --maxDisk={{ .Values.wings.autoConfig.node.disk }} \
                --overallocateDisk={{ .Values.wings.autoConfig.node.diskOverallocate }} \
                --uploadSize={{ .Values.wings.autoConfig.node.uploadSize }} \
                --daemonBase=/var/lib/pterodactyl 2>&1)
              echo "Node creation output: ${NODE_OUTPUT}"
              
              # Extract node ID from creation output
              NODE_ID=$(echo "${NODE_OUTPUT}" | grep -o 'id of [0-9]*' | cut -d' ' -f3)
              echo "Created node with ID: ${NODE_ID}"
              
              # Generate Wings configuration
              echo "Generating Wings configuration..."
              php artisan p:node:configuration "${NODE_ID}" > /etc/pterodactyl/config.yml
              
              echo "Wings auto-configuration completed!"
              echo "Location: ${LOCATION_SHORT} - ${LOCATION_LONG}"
              echo "Node: ${NODE_NAME_RANDOM} on ${NODE_NAME_K8S}"
          volumeMounts:
            - name: wings-config
              mountPath: /etc/pterodactyl
        # Wait for the specific paired Docker daemon to be ready
        - name: wait-for-docker
          image: curlimages/curl:8.5.0
          command: ['sh', '-c']
          args:
            - |
              # Get ordinal from hostname (StatefulSet hostname = pod name)
              ORDINAL=$(hostname | sed 's/.*-//')
              DOCKER_HOST="{{ include "pterodactyl.wings.name" . }}-docker-${ORDINAL}.{{ include "pterodactyl.wings.name" . }}-docker-headless.{{ .Values.namespace | default "pterodactyl" }}.svc.cluster.local"
              
              echo "Waiting for paired Docker daemon: $DOCKER_HOST"
              until curl -f -s http://${DOCKER_HOST}:2375/version >/dev/null 2>&1; do
                echo "Docker daemon not ready, waiting 5 seconds..."
                sleep 5
              done
              echo "Docker daemon ready for pod $ORDINAL!"
        # Set up shared storage permissions
        - name: setup-shared-storage
          image: busybox:1.36
          command: ['sh', '-c']
          args:
            - |
              echo "Setting up shared storage permissions..."
              # Create pterodactyl directories with correct ownership
              mkdir -p /tmp/pterodactyl
              mkdir -p /var/lib/pterodactyl
              
              # Set ownership to pterodactyl user (988:988) and proper permissions
              # Make /tmp/pterodactyl accessible to both pterodactyl user and root
              chown -R 988:988 /tmp/pterodactyl /var/lib/pterodactyl
              chmod -R 777 /tmp/pterodactyl  # Full access for both users
              chmod -R 755 /var/lib/pterodactyl
              
              echo "Shared storage permissions configured"
              echo "tmp contents:" && ls -la /tmp/
              echo "pterodactyl contents:" && ls -la /var/lib/pterodactyl/
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          volumeMounts:
            - name: shared-tmp
              mountPath: /tmp
            - name: wings-data
              mountPath: /var/lib/pterodactyl
      {{- end }}
      volumes:
        - name: wings-data
          {{- if .Values.wings.persistence.data.enabled }}
          {{- if .Values.wings.persistence.data.hostPath }}
          hostPath:
            path: {{ .Values.wings.persistence.data.hostPath }}
            type: DirectoryOrCreate
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "pterodactyl.wings.name" . }}-data
          {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: wings-config
          emptyDir: {}
        - name: shared-tmp
          hostPath:
            path: /tmp/pterodactyl
            type: DirectoryOrCreate
      containers:
        # Docker proxy sidecar - forwards localhost:2375 to the correct Docker daemon
        - name: docker-proxy
          image: alpine/socat:1.7.4.4
          command: ['sh', '-c']
          args:
            - |
              # Get ordinal from hostname and resolve target Docker daemon
              ORDINAL=$(hostname | sed 's/.*-//')
              TARGET="{{ include "pterodactyl.wings.name" . }}-docker-${ORDINAL}.{{ include "pterodactyl.wings.name" . }}-docker-headless.{{ .Values.namespace | default "pterodactyl" }}.svc.cluster.local:2375"
              
              echo "Docker proxy starting..."
              echo "Pod ordinal: $ORDINAL"
              echo "Forwarding localhost:2375 -> $TARGET"
              
              # Wait for target Docker daemon to be ready
              until nc -z $(echo $TARGET | cut -d: -f1) $(echo $TARGET | cut -d: -f2) 2>/dev/null; do
                echo "Waiting for Docker daemon: $TARGET"
                sleep 5
              done
              echo "Docker daemon ready, starting proxy..."
              
              # Start the proxy
              socat TCP-LISTEN:2375,fork,reuseaddr TCP:$TARGET
          ports:
            - name: docker-proxy
              containerPort: 2375
              protocol: TCP
        - name: {{ .Chart.Name }}-wings
          image: "{{ .Values.wings.image.repository }}:{{ .Values.wings.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.wings.image.pullPolicy }}
          securityContext:
            privileged: true
            runAsUser: 0
            runAsGroup: 0
          env:
            - name: TZ
              value: {{ .Values.wings.env.TZ }}
            - name: WINGS_DEBUG
              value: "{{ .Values.wings.env.WINGS_DEBUG }}"
            - name: DOCKER_HOST
              value: "tcp://localhost:2375"

          ports:
            - name: http
              containerPort: 443
              protocol: TCP
            - name: sftp
              containerPort: 2022
              protocol: TCP
          volumeMounts:
            - name: wings-data
              mountPath: /var/lib/pterodactyl
            - name: wings-config
              mountPath: /etc/pterodactyl
            - name: shared-tmp
              mountPath: /tmp
          livenessProbe:
            tcpSocket:
              port: 443
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: 443
            initialDelaySeconds: 30
            periodSeconds: 15
          resources:
            {{- toYaml .Values.wings.resources | nindent 12 }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "pterodactyl.wings.selectorLabels" . | nindent 20 }}
                    app.kubernetes.io/component: docker-daemon
                topologyKey: kubernetes.io/hostname
      {{- with .Values.wings.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }} 
