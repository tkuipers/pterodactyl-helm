# Default values for pterodactyl-helm chart
# This is a YAML-formatted file.

# Namespace configuration
namespace: pterodactyl

# Global settings
global:
  # URL where the panel will be accessible
  panelUrl: "pterodactyl.example.com"

# Panel configuration
panel:
  enabled: true
  
  # Laravel application key - CHANGE THIS IN PRODUCTION!
  # Generate with: php artisan key:generate --show
  # This is a proper 32-byte key base64-encoded for AES-256-CBC
  appKey: "base64:SomeRandomBase64EncodedKeyForPterodactylPanelApplication32Chars="

  # Panel image configuration
  image:
    repository: "ghcr.io/pterodactyl/panel"
    tag: "latest"
    pullPolicy: "IfNotPresent"

  # Panel replica configuration
  replicaCount: 1

  # Panel service configuration
  service:
    type: ClusterIP
    port: 80

  # Environment-specific settings
  env:
    APP_TIMEZONE: "UTC"
    APP_ENV: "production"
    APP_DEBUG: false
    CACHE_DRIVER: "redis"
    SESSION_DRIVER: "redis"
    QUEUE_CONNECTION: "redis"

  # Database configuration
  database:
    host: "pterodactyl-mysql"
    port: 3306
    database: "pterodactyl"
    username: "pterodactyl"
    # Use strong passwords in production
    password: "changeme"

  # Redis configuration
  redis:
    host: "pterodactyl-redis"
    port: 6379

  # Ingress configuration
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      # Modern cert-manager annotations
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      # Nginx ingress annotations
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tls: true

  # Resource limits for production
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  # Storage configuration - using hostPath
  persistence:
    enabled: true
    hostPath: "/var/lib/pterodactyl/panel"
    size: 10Gi

# Queue Worker configuration
queueWorker:
  enabled: true
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# Wings configuration
wings:
  enabled: true
  
  servers:
    - name: wings-0
      portRange:
        start: 25565
        end: 25585
  
  # Wings API configuration
  api:
    port: 8080
  
  # Wings service configuration
  service:
    type: ClusterIP
    port: 8080
  
  # Wings image configuration
  image:
    repository: "ghcr.io/pterodactyl/wings"
    tag: "latest"
    pullPolicy: "IfNotPresent"
  
  # Wings environment variables
  env:
    TZ: "UTC"
    WINGS_DEBUG: false
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  # Proxy for intelligent port-based routing
  proxy:
    enabled: true
    type: "nginx"
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  autoConfig:
    enabled: true
    location:
      long: "Auto-generated Wings Location"
    node:
      memory: 16384  # 16GB
      memoryOverallocate: 0
      disk: 102400   # 100GB
      diskOverallocate: 0
      uploadSize: 1000  # 1GB

  persistence:
    docker:
      enabled: true
      hostPath: "/var/lib/pterodactyl/shared-docker"  # Shared Docker storage for all pods
      size: 500Gi
    data:
      enabled: true
      hostPath: "/var/lib/pterodactyl/wings/data"
      size: 100Gi

# Database configuration
mysql:
  enabled: true
  
  # MySQL image configuration
  image:
    repository: "mysql"
    tag: "8.0"
    pullPolicy: "IfNotPresent"
  
  # Use strong passwords in production
  rootPassword: "changeme"

  # Resource limits for production
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  # Storage configuration - using hostPath
  persistence:
    enabled: true
    hostPath: "/var/lib/pterodactyl/mysql"
    size: 20Gi

# Redis configuration
redis:
  enabled: true
  
  # Redis image configuration
  image:
    repository: "redis"
    tag: "7-alpine"
    pullPolicy: "IfNotPresent"
  
  # Resource limits for production
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

  # Storage configuration - using hostPath
  persistence:
    enabled: true
    hostPath: "/var/lib/pterodactyl/redis"
    size: 5Gi

# Game server configuration
gameServers:
  service:
    enabled: true
    type: LoadBalancer
    # Port range automatically calculated from wings.servers configuration
    
    # Static IP configuration for port forwarding setup
    # Set to specific IP for consistent router port forwarding
    # Leave empty/null to let MetalLB assign automatically
    loadBalancerIP: ""
    
    # MetalLB configuration
    annotations:
      metallb.universe.tf/address-pool: "gameserver-pool" 
