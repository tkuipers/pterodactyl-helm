# Default values for pterodactyl-helm chart
# This is a YAML-formatted file.

# Global settings
global:
  # URL where the panel will be accessible
  panelUrl: "panel.example.com"
  
# Panel component
panel:
  enabled: true
  image:
    repository: ghcr.io/pterodactyl/panel
    tag: latest
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  # Panel environment variables
  env:
    APP_ENV: production
    APP_DEBUG: false
    APP_TIMEZONE: UTC
    CACHE_DRIVER: redis
    SESSION_DRIVER: redis
    QUEUE_CONNECTION: redis
  
  # Panel database configuration
  database:
    host: "mysql"
    port: 3306
    database: "panel"
    username: "pterodactyl"
    # Will be stored as a secret
    password: "changeme"
  
  # Panel Redis configuration
  redis:
    host: "redis"
    port: 6379
    password: ""
  
  # Panel ingress
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: "panel.example.com"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: panel-tls
        hosts:
          - "panel.example.com"
  
  # Panel service
  service:
    type: ClusterIP
    port: 80
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Storage for panel
  persistence:
    enabled: true
    storageClass: ""
    size: 5Gi
    accessModes:
      - ReadWriteOnce

# Wings component (Game Server Daemon)
wings:
  enabled: true
  image:
    repository: ghcr.io/pterodactyl/wings
    tag: latest
    pullPolicy: IfNotPresent
  
  # We need only 1 instance per node where you want to host game servers
  replicaCount: 1
  
  # Wings needs to be privileged for Docker-in-Docker
  securityContext:
    privileged: true
  
  # Wings environment configuration
  env:
    TZ: UTC
    WINGS_DEBUG: false
  
  # Wings service to expose API
  service:
    type: ClusterIP
    port: 8080
  
  # Wings persistence for docker storage and game servers
  persistence:
    docker:
      enabled: true
      storageClass: ""
      size: 20Gi
      accessModes:
        - ReadWriteOnce
    data:
      enabled: true
      storageClass: ""
      size: 50Gi
      accessModes:
        - ReadWriteOnce
  
  # Node selectors to place wings on specific nodes
  nodeSelector: {}
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

# Database (MySQL/MariaDB)
mysql:
  enabled: true
  image:
    repository: mariadb
    tag: 10.5
    pullPolicy: IfNotPresent
  
  rootPassword: "changeme"
  
  persistence:
    enabled: true
    storageClass: ""
    size: 10Gi
    accessModes:
      - ReadWriteOnce
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# Redis for caching/queue
redis:
  enabled: true
  image:
    repository: redis
    tag: 6
    pullPolicy: IfNotPresent
  
  persistence:
    enabled: true
    storageClass: ""
    size: 1Gi
    accessModes:
      - ReadWriteOnce
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Queue worker for background tasks
queueWorker:
  enabled: true
  replicaCount: 1
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# Game server port exposure
gameServers:
  # Service to expose game server ports
  service:
    type: LoadBalancer
    # Range of ports to expose for game servers
    portRange:
      start: 25565
      end: 25585
